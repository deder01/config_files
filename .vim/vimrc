" Remap leader to comma
let mapleader = ","

" Encoding for lightline
set encoding=utf-8
scriptencoding utf-8

" Set up vundle
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle
Plugin 'VundleVim/Vundle.vim'

" Better search
Plugin 'henrik/vim-indexed-search'

" Move through camelCase
Plugin 'bkad/CamelCaseMotion'

" nerdtree
Plugin 'scrooloose/nerdtree'

" fugitive (git) 
Plugin 'tpope/vim-fugitive'

" syntastic 
Plugin 'vim-syntastic/syntastic'

" easymotion
Plugin 'easymotion/vim-easymotion'

" fzf
Plugin 'junegunn/fzf'
Plugin 'junegunn/fzf.vim'

" js syntax
Plugin 'crusoexia/vim-monokai'
Plugin 'jelera/vim-javascript-syntax'
Plugin 'othree/javascript-libraries-syntax.vim'

" CSS syntax and SCSS
Plugin 'hail2u/vim-css3-syntax'

" Easily align scss
Plugin 'junegunn/vim-easy-align'

" status bar
Plugin 'itchyny/lightline.vim'

" Ctrp
Plugin 'tacahiroy/ctrlp-funky'
Plugin 'kien/ctrlp.vim'

" end of plugins
call vundle#end()

"The essentials
filetype plugin indent on
set nocompatible
set autoindent
set smartindent
set hidden


" Syntax
syntax on
set t_Co=256  " vim-monokai now only support 256 colours in terminal.
colorscheme monokai
"Highlighting for folded lines 
:hi folded ctermfg=blue

"Set  statusbar theme
let g:lightline = {
      \ 'colorscheme': 'landscape',
      \ 'mode_map': { 'c': 'NORMAL' },
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ]
      \ },
      \ 'component_function': {
      \   'modified': 'LightlineModified',
      \   'readonly': 'LightlineReadonly',
      \   'fugitive': 'LightlineFugitive',
      \   'filename': 'LightlineFilename',
      \   'fileformat': 'LightlineFileformat',
      \   'filetype': 'LightlineFiletype',
      \   'fileencoding': 'LightlineFileencoding',
      \   'mode': 'LightlineMode',
      \ },
      \ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
      \ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" }
      \ }

function! LightlineModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightlineReadonly()
  if &readonly
    return "\ue0a2"
  else
    return ""
  endif
endfunction

function! LightLineGitversion()
  let fullname = expand('%')
  let gitversion = ''
  if fullname =~? 'fugitive://.*/\.git//0/.*'
      let gitversion = 'git index'
  elseif fullname =~? 'fugitive://.*/\.git//2/.*'
      let gitversion = 'git target'
  elseif fullname =~? 'fugitive://.*/\.git//3/.*'
      let gitversion = 'git merge'
  elseif &diff == 1
      let gitversion = 'working copy'
  endif
  return gitversion
endfunction

function! LightlineFilename()
  return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
        \  &ft == 'unite' ? unite#get_status_string() :
        \  &ft == 'vimshell' ? vimshell#get_status_string() :
        \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
endfunction

function! LightlineFugitive()
  if &ft !~? 'vimfiler\|gundo' && exists("*fugitive#head")
    let branch = fugitive#head()
    return branch !=# '' ? "\ue0a0 ".branch : ''
  endif
  return ''
endfunction

function! LightlineFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightlineFiletype()
  return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
endfunction

function! LightlineFileencoding()
  return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
endfunction

function! LightlineMode()
  return winwidth(0) > 60 ? lightline#mode() : ''
endfunction

" syntax for hamlpy
au BufRead,BufNewFile *.hamlpy set ft=haml
" Handlebar syntax
au BufRead,BufNewFile *.handlebars,*.hbs set ft=html syntax=handlebars


"Nerdtree settings
noremap <silent> <C-o> :NERDTreeToggle<CR>

"Show tabs as '>.' and make them dark grey
set list
set listchars=tab:\>.
hi SpecialKey ctermfg=DarkGrey guifg=DarkGrey
hi NonText ctermfg=DarkGrey guifg=DarkGrey


"End lines at 920 columns
set textwidth=920

"Make sure I ain't cheating with those arrow keys!
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>
noremap <up> <nop>
noremap <down> <nop>
noremap <left> <nop>
noremap <right> <nop>

"Split buffer below
set splitbelow


" Turn off inserting comments just cuz the line before was one
set formatoptions-=or

" Map Y to act like D and C, i.e. to yank until EOL, rather than act as yy,
" which is the default
noremap Y y$

" Map space to for fast movement in visual mode
noremap <Space> 5

inoremap ;; :
"Map semicolon to end of line
noremap ;a ^
noremap ;; $
noremap % K
noremap K %

"Remap jj to escape, so we can move in and out of visual mode
inoremap jj <Esc>
noremap ff <Esc>

"Remap lc to close lwindow
:cmap lc lclose

"And make sure I aint' cheating with no escape key!
imap <Esc> <nop>

" Better command-line completion
set wildmenu


" Show partial commands in the last line of the screen
set showcmd

" Highlight searches (use <C-L> to temporarily turn off highlighting; see the
" mapping of <C-L> below)
set hlsearch

" Set g for search and replace
set gdefault

" Jump to search as I type
set incsearch

" Case Stuff
set ignorecase
set smartcase

" Allow backspacing over autoindent, line breaks and start of insert action
set backspace=indent,eol,start

" Instead of failing a command because of unsaved changes, instead raise a
" dialogue asking if you wish to save changed files.
set confirm

" Turn off error bells
set noerrorbells
set novisualbell

" Enable use of the mouse for all modes
set mouse=a


" Set the command window height to 2 lines, to avoid many cases of having to
" "press <Enter> to continue"
set cmdheight=2

" Show file and column in statusline
set laststatus=2
set statusline=
set ruler

" Display line numbers on the left
set number

" Quickly time out on keycodes, but never time out on mappings
set notimeout ttimeout ttimeoutlen=200

" Use <F11> to toggle between 'paste' and 'nopaste'
set pastetoggle=<F5>

"------------------------------------------------------------
" Plugin settings

" syntastic
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_mode_map = { 'mode': 'passive' }

" Set js checker
let g:syntastic_javascript_checkers = ['jslint']
" Set sass checker
let g:syntastic_scss_checkers = ['sass_lint']

command! SC execute 'SyntasticCheck'
nmap <F7> :SC<CR>

" EasyAlign
let g:easy_align_ignore_groups = ['Comment', 'String']
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

" CamelCaseMotion
call camelcasemotion#CreateMotionMappings('<leader>')

" CtrlpFunky
nnoremap <Leader>fu :CtrlPFunky<Cr>
" narrow the list down with a word under cursor
nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>

" vim-fugitive
" Keep current file open and show Ggrep results in quickfix list
command! -nargs=+ S execute ':silent Ggrep!' <q-args> | cw | redraw!
"command! -nargs=+ Si execute ':silent Ggrep! -i ' . [<f-args>][0] . ' **/*.' . [<f-args>][1] | cw | redraw!
command! -nargs=+ Ssp execute ':sp | silent Ggrep!' <q-args> | cw | redraw!
command! -nargs=+ Sisp execute ':sp | silent Ggrep! -i' <q-args> | cw | redraw!
map <silent> <C-k> :Sisp

" easymotion
let g:EasyMotion_do_mapping = 0 " Disable default mappings

" map <leader>i to move to tab i for 0-9
let i = 1
while i<=9
  exec "nnoremap <Leader>".i." ".i."gt"
  let i+=1
endwhile

" Jump to anywhere you want with minimal keystrokes, with just one key binding.
" `s{char}{label}`
" nmap s <Plug>(easymotion-overwin-f)
" or
" `s{char}{char}{label}`
" Need one more keystroke, but on average, it may be more comfortable.
nmap s <Plug>(easymotion-overwin-f2)

" Turn on case insensitive feature
let g:EasyMotion_smartcase = 1

" JK motions: Line motions
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)

" FZF
map <silent> <C-h> :FZF<CR>
map <silent> <C-j> :sp\|:FZF<CR>

"------------------------------------------------------------
" Indentation options {{{1
"
" Indentation settings according to personal preference.

" Indentation settings for using 2 spaces instead of tabs.
" Do not change 'tabstop' from its default value of 8 with this setup.
"set softtabstop=2
"set expandtab

" Indentation settings for using hard tabs for indent. Display tabs as
" two characters wide.
" set expandtab
set expandtab

set tabstop=2
set softtabstop=0
set shiftwidth=2
set smarttab


"------------------------------------------------------------
" Mappings {{{1
"
" Useful mappings
"

" Map <C-L> (redraw screen) to also turn off search highlighting until the
" next search
nnoremap <C-L> :nohl<CR><C-L>

" CTRL-C to copy (visual mode)
vmap <C-c> "+y
" CTRL-X to cut (visual mode)
vmap <C-x> "+x
" CTRL-X to cut (visual mode)
vmap <C-v> <esc>"+gP


function! MarkWindowSwap()
	let g:markedWinNum = winnr()
endfunction

function! DoWindowSwap()
	"Mark destination
	let curNum = winnr()
	let curBuf = bufnr( "%" )
	exe g:markedWinNum . "wincmd w"
	"Switch to source and shuffle dest->source
	let markedBuf = bufnr( "%" )
	"Hide and open so that we aren't prompted and keep history
	exe 'hide buf' curBuf
	"Switch to dest and shuffle source->dest
	exe curNum . "wincmd w"
	"Hide and open so that we aren't prompted and keep history
	exe 'hide buf' markedBuf
endfunction

noremap <silent> <leader>mw :call MarkWindowSwap()<CR>
noremap <silent> <leader>pw :call DoWindowSwap()<CR>
