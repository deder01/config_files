"""""""""" Plugins  """"""""""
" Use Vundle for package management
set nocompatible | filetype off | set rtp+=~/.vim/bundle/Vundle.vim | call vundle#begin() | Plugin 'VundleVim/Vundle.vim'

""""" Color Schemes """""
Plugin 'crusoexia/vim-monokai'
Plugin 'Lokaltog/vim-distinguished'
""""" /Color Schemes """"
"
""""" Front End """""
"" Javascript ""
Plugin 'bkad/CamelCaseMotion'
Plugin 'jelera/vim-javascript-syntax'
Plugin 'othree/javascript-libraries-syntax.vim'
Plugin 'ternjs/tern_for_vim'
"" /Javascript ""

"" HTML and CSS ""
Plugin 'hail2u/vim-css3-syntax'
Plugin 'othree/html5.vim'
Plugin 'junegunn/vim-easy-align'
Plugin 'vim-scripts/closetag.vim'
"" /HTML and CSS ""
""""" /Front End """"

""""" Utilities """""
"" Syntax and Auto-completions ""
Plugin 'ervandew/supertab'
Plugin 'Valloric/YouCompleteMe'
Plugin 'vim-syntastic/syntastic'
Plugin 'jiangmiao/auto-pairs'
"" /Syntax Auto-completions ""

"" File Navigation ""
Plugin 'easymotion/vim-easymotion'
Plugin 'henrik/vim-indexed-search'
Plugin 'kien/ctrlp.vim' " Only have ctrlp for ctrlp-funky
Plugin 'Shougo/denite.nvim'
Plugin 'tacahiroy/ctrlp-funky'
"" /File navigation ""

"" Codebase Navigation ""
Plugin 'junegunn/fzf'
Plugin 'junegunn/fzf.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'tpope/vim-fugitive'
"" /Codebase Navigation ""

"" Statusbar ""
Plugin 'itchyny/lightline.vim'
"" /Statusbar ""
""""" /Utilities """"

call vundle#end() | filetype plugin indent on
"""""""""" /Plugins  """"""""""

"""""""""" The Essentials """"""""""
set autoindent | set smartindent
set hidden

" Encoding necessary for lightline "
set encoding=utf-8
scriptencoding utf-8

""""" Tabs """""
set expandtab
set tabstop=2
set shiftwidth=2
set smarttab

"" Show tabs as '>.' and make them dark grey  ""
set list
set listchars=tab:\>.
hi SpecialKey ctermfg=DarkGrey guifg=DarkGrey
hi NonText ctermfg=DarkGrey guifg=DarkGrey
"" /Grey Tabs  ""
""""" /Tabs """""


""""" Preferences """""
let mapleader = ","
set t_Co=256
colorscheme distinguished
"""""""""" /The Essentials """"""""""


"""""""""" Syntax """"""""""
syntax on
"
" Highlighting for folded lines "
:hi folded ctermfg=blue

"" Strange Fletypes "" 
au BufRead,BufNewFile *.hamlpy set ft=haml
au BufRead,BufNewFile *.handlebars,*.hbs set ft=html syntax=handlebars
"" /Strange Fletypes "" 
"""""""""" /Syntax """"""""""

"""""""""" Plugin Settings """"""""""
""""" Lightline """""
let g:lightline = {
      \ 'colorscheme': 'landscape',
      \ 'mode_map': { 'c': 'NORMAL' },
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ], [ 'filename', 'gitversion' ] ],
      \   'right': [ [ 'lineinfo' ], [ 'percent' ], ['filetype' ] ]
      \ },
      \ 'inactive': {
      \   'left': [ [ 'filename', 'gitversion' ] ],
      \   'right': [ [ 'lineinfo' ], [ 'percent' ] ]
      \ },
      \ 'component_function': {
      \   'modified': 'LightlineModified',
      \   'readonly': 'LightlineReadonly',
      \   'fugitive': 'LightlineFugitive',
      \   'filename': 'LightlineFilename',
      \   'fileformat': 'LightlineFileformat',
      \   'filetype': 'LightlineFiletype',
      \   'fileencoding': 'LightlineFileencoding',
      \   'gitversion': 'LightLineGitversion',
      \   'mode': 'LightlineMode',
      \ },
      \ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
      \ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" }
      \ }

function! LightlineModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightlineReadonly()
  if &readonly
    return "\ue0a2"
  else
    return ""
  endif
endfunction

function! LightLineGitversion()
  let fullname = expand('%')
  let gitversion = ''
  if fullname =~? 'fugitive://.*/\.git//0/.*'
      let gitversion = 'git index'
  elseif fullname =~? 'fugitive://.*/\.git//2/.*'
      let gitversion = 'git target'
  elseif fullname =~? 'fugitive://.*/\.git//3/.*'
      let gitversion = 'git merge'
  elseif &diff == 1
      let gitversion = 'working copy'
  endif
  return gitversion
endfunction

function! LightlineFilename()
  return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
        \  &ft == 'unite' ? unite#get_status_string() :
        \  &ft == 'vimshell' ? vimshell#get_status_string() :
        \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
endfunction

function! LightlineFugitive()
  if &ft !~? 'vimfiler\|gundo' && exists("*fugitive#head")
    let branch = fugitive#head()
    return branch !=# '' ? "\ue0a0 ".branch : ''
  endif
  return ''
endfunction

function! LightlineFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightlineFiletype()
  return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
endfunction

function! LightlineFileencoding()
  return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
endfunction

function! LightlineMode()
  return winwidth(0) > 60 ? lightline#mode() : ''
endfunction

function! LightLineGitversion()
  let fullname = expand('%')
  let gitversion = ''
  if fullname =~? 'fugitive://.*/\.git//0/.*'
      let gitversion = 'git index'
  elseif fullname =~? 'fugitive://.*/\.git//2/.*'
      let gitversion = 'git target'
  elseif fullname =~? 'fugitive://.*/\.git//3/.*'
      let gitversion = 'git merge'
  elseif &diff == 1
      let gitversion = 'working copy'
  endif
  return gitversion
endfunction
""""" /Lightline """""

""""" Syntastic """""
"set statusline+=%{SyntasticStatuslineFlag()}
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_mode_map = { 'mode': 'passive' }

""" Syntax Checkers """
"" JS Checkers ""
let g:syntastic_javascript_checkers = ['jshint']
let g:syntastic_javascript_jshint_args="--config ~/.jshintrc"
"" /JS checkers ""

"" SASS Checkers ""
let g:syntastic_scss_checkers = ['sass_lint']
"" /SASS Checkers ""
""" /Syntax Checkers """

""" Shortcuts """
command! SC execute 'SyntasticCheck'
command! SR execute 'SyntasticReset'
nmap <F7> :SC<CR>
""""" /Syntastic """""


""""" Tern """""
noremap <C-g> :TernDefTab<CR>
nmap <silent> <leader>tr :TernRef<CR>
nmap <silent> <leader>tn :TernRename<CR>
nmap <silent> <leader>td :TernDef<CR>
""""" /Tern """""

""""" YCM """""
let g:ycm_autoclose_preview_window_after_completion = 1

""" CSS """
let g:ycm_semantic_triggers =  {
    \   'scss': ['    ', ': '],
    \   'css': ['    ', ': '],
    \ }
""" /CSS """
""""" /YCM """""

""""" SuperTab """""
let g:SuperTabClosePreviewOnPopupClose = 1
""""" /SuperTab """""

""""" CloseTag """""
inoremap <C-t> <C-R>=GetCloseTag()<CR>
map <C-_> a<C-_><ESC>
""""" /CloseTag """""

""""" EasyAlign """""
let g:easy_align_ignore_groups = ['Comment', 'String']
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)
""""" /EasyAlign """""

""""" CamelCaseMotion """""
call camelcasemotion#CreateMotionMappings('<leader>')
""""" /CamelCaseMotion """""

""""" CtrlPFunky """""
nnoremap <Leader>fu :CtrlPFunky<Cr>
" narrow the list down with a word under cursor
nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>
let g:ctrlp_funky_nolim=1
""""" /CtrlPFunky """""

""""" EasyMotion """""
let g:EasyMotion_do_mapping = 0 " Disable default mappings

" nmap s <Plug>(easymotion-overwin-f)
nmap s <Plug>(easymotion-overwin-f2)

" Turn on case insensitive feature
let g:EasyMotion_smartcase = 1

" JK motions: Line motions
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
""""" /EasyMotion """""

""""" FZF """""
noremap <silent> <C-a> :Ag<CR>
noremap <silent> <C-j> :FZF<CR>
noremap <silent> <C-h> :Buffers<CR>

let g:fzf_action = {
  \ 'ctrl-t' : 'tab split',
  \ 'ctrl-h' : 'split',
  \ 'ctrl-v' : 'vsplit'
  \ }
""""" /FZF """""

""""" NerdTree """""
" noremap <silent> <C-o> :NERDTreeToggle<CR>
""""" /NerdTree """""
"""""""""" /Plugin Settings """"""""""

"""""""""" It's Personal """"""""""
" End lines at 920 columns
set textwidth=920

" My braces are not always on the first column
" Taken directory from :h motion.txt
:map [[ ?{<CR>w99[{
:map ]] /}<CR>b99]}
:map ][ j0[[%/{<CR>
:map [] k$][%?}<CR>

:map <leader>{ ?{<CR>n
:map <leader>b{ /{<CR>n
:map <leader>} /}<CR>n
:map <leader>b} ?}<CR>n

" But sometimes I just want to spam through braces


""""" VIM tabs """""
" map <leader>i to move to tab i for 0-9
let i = 1
while i<=9
  exec "nnoremap <Leader>".i." ".i."gt"
  let i+=1
endwhile

noremap <C-n> :tabn<CR>
noremap <C-p> :tabp<CR>
""""" /VIM tabs """""


" Make sure I ain't cheating with those arrow keys!
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

" Split buffer below
set splitbelow


" Turn off inserting comments just cuz the line before was one
set formatoptions-=or

" Map Y to act like D and C, i.e. to yank until EOL, rather than act as yy,
" which is the default
noremap Y y$

" Map f to 5 for fast movement in visual mode
noremap f 5

inoremap ;; :
" Map semicolon to end of line
noremap ;a ^
noremap ;; $

" Map K to match braces
noremap % K
noremap K %

" Remap jj to escape, so we can move in and out of visual mode
inoremap jj <Esc>
noremap ff <Esc>

" Remap lc to close lwindow
:cmap lc lclose

" And make sure I aint' cheating with no escape key!
imap <Esc> <nop>

" Better command-line completion
set wildmenu


" Show partial commands in the last line of the screen
set showcmd

" Highlight searches (use <C-L> to temporarily turn off highlighting; see the
" mapping of <C-L> below)
set hlsearch

" Set g for search and replace
set gdefault

" Jump to search as I type
set incsearch

" Case Stuff
set ignorecase
set smartcase

" Allow backspacing over autoindent, line breaks and start of insert action
set backspace=indent,eol,start

" Instead of failing a command because of unsaved changes, instead raise a
" dialogue asking if you wish to save changed files.
set confirm

" Turn off error bells
set noerrorbells
set novisualbell

" Enable use of the mouse for all modes
set mouse=a


" Set the command window height to 2 lines, to avoid many cases of having to
" "press <Enter> to continue"
set cmdheight=2

" Show file and column in statusline
set laststatus=2
set statusline=
set ruler

" Display line numbers on the left
set number

" Quickly time out on keycodes, but never time out on mappings
set notimeout ttimeout ttimeoutlen=200

" Toggle between 'paste' and 'nopaste'
set pastetoggle=<leader>p

""""" Mappings """""
" Map <C-L> (redraw screen) to also turn off search highlighting until the
" next search
nnoremap <C-L> :nohl<CR><C-L>

" CTRL-C to copy (visual mode)
vmap <C-c> "+y
" CTRL-X to cut (visual mode)
vmap <C-x> "+x
" CTRL-X to cut (visual mode)
vmap <C-v> <esc>"+gP
""""" /Mappings """""

""""" Functions """""
function! MarkWindowSwap()
  let g:markedWinNum = winnr()
endfunction

function! DoWindowSwap()
  "Mark destination
  let curNum = winnr()
  let curBuf = bufnr( "%" )
  exe g:markedWinNum . "wincmd w"
  "Switch to source and shuffle dest->source
  let markedBuf = bufnr( "%" )
  "Hide and open so that we aren't prompted and keep history
  exe 'hide buf' curBuf
  "Switch to dest and shuffle source->dest
  exe curNum . "wincmd w"
  "Hide and open so that we aren't prompted and keep history
  exe 'hide buf' markedBuf
endfunction

noremap <silent> <leader>mw :call MarkWindowSwap()<CR>
noremap <silent> <leader>pw :call DoWindowSwap()<CR>
""""" /Functions """""
"""""""""" /It's Personal """"""""""
