"""""""""" Plugins  """"""""""
" Use Vundle for package management
set nocompatible | filetype off | set rtp+=~/.vim/bundle/Vundle.vim | call vundle#begin() | Plugin 'VundleVim/Vundle.vim'

""""" Color Schemes """""
Plugin 'crusoexia/vim-monokai'
Plugin 'deder01/vim-dots'
Plugin 'Lokaltog/vim-distinguished'
Plugin 'nanotech/jellybeans.vim'
Plugin 'joshdick/onedark.vim'
""""" /Color Schemes """"
"
""""" Front End """""
"" Javascript ""
Plugin '1995eaton/vim-better-javascript-completion'
Plugin 'leafgarland/typescript-vim'
Plugin 'pangloss/vim-javascript'
Plugin 'MaxMEllon/vim-jsx-pretty'
Plugin 'bkad/CamelCaseMotion'
Plugin 'othree/javascript-libraries-syntax.vim'
Plugin 'ternjs/tern_for_vim'
Plugin 'Quramy/tsuquyomi'
" Plugin 'mxw/vim-jsx'
Plugin 'heavenshell/vim-jsdoc'
"" /Javascript ""

"" HTML and CSS ""
Plugin 'cakebaker/scss-syntax.vim'
Plugin 'mattn/emmet-vim'
Plugin 'hail2u/vim-css3-syntax'
Plugin 'junegunn/vim-easy-align'
Plugin 'mustache/vim-mustache-handlebars'
Plugin 'othree/html5.vim'
Plugin 'Valloric/MatchTagAlways'
Plugin 'vim-scripts/closetag.vim'
"" /HTML and CSS ""
""""" /Front End """"

""""" Utilities """""
"" Syntax and Auto-completions ""
Plugin 'ntpeters/vim-better-whitespace'
Plugin 'craigemery/vim-autotag'
Plugin 'chrisbra/NrrwRgn'
" Plugin 'ervandew/supertab'
Plugin 'scrooloose/nerdcommenter'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-obsession'
" Plugin 'Valloric/YouCompleteMe'
Plugin 'skywind3000/asyncrun.vim'
"Plugin 'vim-syntastic/syntastic'
Plugin 'w0rp/ale'
Plugin 'ruanyl/vim-fixmyjs'
Plugin 'gcorne/vim-sass-lint'
Plugin 'wesQ3/vim-windowswap'
Plugin 'hushicai/tagbar-javascript.vim'
Plugin 'majutsushi/tagbar'
Plugin 'xolox/vim-misc'
"Plugin 'xolox/vim-easytags'
"" /Syntax Auto-completions ""

"" File Navigation ""
Plugin 'easymotion/vim-easymotion'
Plugin 'henrik/vim-indexed-search'
Plugin 'kien/ctrlp.vim' " Only have ctrlp for ctrlp-funky
Plugin 'kshenoy/vim-signature'
Plugin 'tacahiroy/ctrlp-funky'
"" /File navigation ""

"" Codebase Navigation ""
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'junegunn/fzf'
Plugin 'junegunn/fzf.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'tommcdo/vim-fugitive-blame-ext'
Plugin 'tpope/vim-fugitive'
Plugin 'airblade/vim-gitgutter'
"" /Codebase Navigation ""

"" Statusbar ""
Plugin 'itchyny/lightline.vim'
"" /Statusbar ""

"" Whitespace ""
nnoremap <leader>sq :StripWhitespace<cr>
"" /Whitespace ""

"" Random ""
Plugin 'chip/vim-fat-finger'
Plugin 'deder01/vim-abbrevs'
"" /Random ""
""""" /Utilities """"

call vundle#end() | filetype plugin indent on
"""""""""" /Plugins  """"""""""

"""""""""" The Essentials """"""""""
set autoindent | set smartindent
set hidden

" Encoding necessary for lightline "
set encoding=utf-8
scriptencoding utf-8

" Display line numbers on the left
set relativenumber
set number

" Case Stuff
set ignorecase
set smartcase

""""" Tabs """""
set expandtab
set tabstop=2
set shiftwidth=2
set smarttab

"" Grey Tabs ""
"" Show tabs as '>.' and make them dark grey  ""
set list
set listchars=tab:\>.
"" /Grey Tabs ""
""""" /Tabs """""


""""" Preferences """""
let mapleader = ","
set t_Co=256
colorscheme dots
""""" /Preferences """""
"""""""""" /The Essentials """"""""""


"""""""""" Syntax """"""""""
syntax on

" Highlighting for folded lines "
:hi folded ctermfg=blue

"" Strange Fletypes ""
au BufRead,BufNewFile *.hamlpy set ft=haml
au BufRead,BufNewFile *.handlebars,*.hbs set ft=html syntax=handlebars
au BufRead,BufNewFile *.scss set ft=scss.css
autocmd filetype crontab setlocal nobackup nowritebackup
"" /Strange Fletypes ""

"" Tag matching ""
let g:mta_set_default_matchtag_color = 1
let g:mta_filetypes = {
    \ 'html' : 1,
    \ 'javascript.jsx' : 1,
    \ 'jinja' : 1,
    \ 'liquid' : 1,
    \ 'markdown' : 1,
    \ 'xhtml' : 1,
    \ 'xml' : 1,
    \}
"" /Tag matching ""
"""""""""" /Syntax """"""""""

"""""""""" Plugin Settings """"""""""
""""" Lightline """""
let g:lightline = {
      \ 'colorscheme': 'landscape',
      \ 'mode_map': { 'c': 'NORMAL' },
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ], [ 'filename', 'gitversion' ] ],
      \   'right': [ [ 'lineinfo' ], [ 'percent' ], ['filetype' ] ]
      \ },
      \ 'inactive': {
      \   'left': [ [ 'filename', 'gitversion' ] ],
      \   'right': [ [ 'lineinfo' ], [ 'percent' ] ]
      \ },
      \ 'component_function': {
      \   'modified': 'LightlineModified',
      \   'readonly': 'LightlineReadonly',
      \   'fugitive': 'LightlineFugitive',
      \   'filename': 'LightlineFilename',
      \   'fileformat': 'LightlineFileformat',
      \   'filetype': 'LightlineFiletype',
      \   'fileencoding': 'LightlineFileencoding',
      \   'gitversion': 'LightLineGitversion',
      \   'mode': 'LightlineMode',
      \ },
      \ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
      \ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" }
      \ }

function! LightlineModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightlineReadonly()
  if &readonly
    return "\ue0a2"
  else
    return ""
  endif
endfunction

function! LightlineFilename()
  return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
        \  &ft == 'unite' ? unite#get_status_string() :
        \  &ft == 'vimshell' ? vimshell#get_status_string() :
        \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
endfunction

function! LightlineFugitive()
  if &ft !~? 'vimfiler\|gundo' && exists("*fugitive#head")
    let branch = fugitive#head()
    return branch !=# '' ? "\ue0a0 ".branch : ''
  endif
  return ''
endfunction

function! LightlineFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightlineFiletype()
  return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
endfunction

function! LightlineFileencoding()
  return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
endfunction

function! LightlineMode()
  return winwidth(0) > 60 ? lightline#mode() : ''
endfunction

function! LightLineGitversion()
  let fullname = expand('%')
  let gitversion = ''
  if fullname =~? 'fugitive://.*/\.git//0/.*'
      let gitversion = 'git index'
  elseif fullname =~? 'fugitive://.*/\.git//2/.*'
      let gitversion = 'git target'
  elseif fullname =~? 'fugitive://.*/\.git//3/.*'
      let gitversion = 'git merge'
  elseif fullname =~? 'fugitive://.*/\.git//.*'
      let gitversion = 'previous version'
  elseif &diff == 1
      let gitversion = 'working copy'
  endif
  return gitversion
endfunction
""""" /Lightline """""


""""" Fugitive """""
nnoremap <leader>gd :Gvdiff<cr>
""""" /Fugitive """""

""""" Tsuquyomi """""
let g:tsuquyomi_disable_quickfix=1
""""" /Tsuquyomi """""

""""" ALE """""
" Autocheck when saved
"autocmd BufWritePost *.js AsyncRun -post=checktime eslint --fix %
let g:alex_fixers = {
      \ 'typescript': ['tslint']
      \ }
let g:ale_lint_on_save = 1
let g:ale_lint_on_enter = 0
let g:ale_fix_on_save = 1
let g:ale_linters = {'javascript': ['eslint'], 'typescript': ['tslint']}
let g:ale_sign_error = '●' " Less aggressive than the default '>>'
let g:ale_sign_warning = '.'
let g:ale_typescript_tslint_config_path='/home/eder/tslint.json'
noremap <leader>li :ALELint<CR>
""""" /ALE """""


""""" Fixmyjs """""
let g:fixmyjs_engine='eslint'
noremap <Leader><Leader>f :Fixmyjs<CR>
""""" /Fixmyjs """""

""""" Autotag  """""
let g:autotagmaxTagsFileSize = 1024 * 1024 * 70
""""" /Autotag  """""

""""" Tern/Tsuq """""
nmap <silent> <leader>td :TsuDefinition<CR>
nmap <silent> <leader>tn :TsuRenameSymbol<CR>
nmap <silent> <leader>tr :TsuTypeDefinition<CR>
nmap <silent> <leader>tt :TernDefTab<CR>
noremap <C-g> :TernDefTab<CR>
""""" /Tern/Tsuq """""

""""" JSX """""
let g:jsx_ext_required = 0 " Allow JSX in normal JS files
let g:javascript_plugin_flow = 1
""""" /JSX """""

""""" JsDoc """""
let g:jsdoc_allow_input_prompt = 1
let g:jsdoc_input_description = 1
""""" /JsDoc """""

""""" YCM """""
let g:ycm_path_to_python_interpreter = '/home/eder/.local/bin/ycm-python'
inoremap <expr> <C-Space> pumvisible() \|\| &omnifunc == '' ?
            \ "\<lt>C-n>" :
            \ "\<lt>C-x>\<lt>C-o><c-r>=pumvisible() ?" .
            \ "\"\\<lt>c-n>\\<lt>c-p>\\<lt>c-n>\" :" .
            \ "\" \\<lt>bs>\\<lt>C-n>\"\<CR>"
imap <C-@> <C-Space>
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_semantic_triggers =  {
    \   'scss': [': '],
    \   'css': [': '],
    \   'html': ['<', '"', '</', ' '],
    \   'typescript': ['.'],
    \ }
""""" /YCM """""

""""" OmniComplete """""
autocmd FileType typescript setlocal completeopt+=menu,preview

set completeopt=longest,menuone
inoremap <C-Space> <C-x><C-o>
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
inoremap <expr> <M-,> pumvisible() ? '<C-n>' :
  \ '<C-x><C-o><C-n><C-p><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
""""" /OmniComplete """""

""""" SuperTab """""
let g:SuperTabClosePreviewOnPopupClose = 1
""""" /SuperTab """""

""""" CloseTag """""
inoremap <C-t> <C-R>=GetCloseTag()<CR>
map <C-_> a<C-_><ESC>
let g:closetag_filenames = '*.xhtml,*.jsx,*.js'
""""" /CloseTag """""

""""" EasyAlign """""
let g:easy_align_ignore_groups = ['Comment', 'String']
nmap ga <Plug>(EasyAlign)
xmap <leader>ga <Plug>(EasyAlign)<right>:
xmap ga <Plug>(EasyAlign)
""""" /EasyAlign """""

""""" CamelCaseMotion """""
call camelcasemotion#CreateMotionMappings('<leader>')
""""" /CamelCaseMotion """""

""""" CtrlPFunky """""
nnoremap <Leader>fu :CtrlPFunky<Cr>
" narrow the list down with a word under cursor
nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>
let g:ctrlp_funky_nolim=1
""""" /CtrlPFunky """""

""""" EasyMotion """""
let g:EasyMotion_do_mapping = 0 " Disable default mappings

" nmap s <Plug>(easymotion-overwin-f)
nmap s <Plug>(easymotion-overwin-f2)

" Turn on case insensitive feature
let g:EasyMotion_smartcase = 1

" JK motions: Line motions
map <Leader>jj <Plug>(easymotion-j)
map <Leader>jk <Plug>(easymotion-k)
""""" /EasyMotion """""

""""" FZF """""
noremap <silent> <C-k> :Ag<CR>
noremap <silent> <C-j> :FZF<CR>
noremap <silent> <C-h> :Buffers<CR>

let g:fzf_action = {
  \ 'ctrl-t' : 'tab split',
  \ 'ctrl-h' : 'split',
  \ 'ctrl-v' : 'vsplit'
  \ }
""""" /FZF """""

""""" NerdTree """""
noremap <silent> <leader>nt :NERDTreeTabsToggle<CR>
let g:NERDTreeMapMenu='M'
let g:NERDTreeShowBookmarks=1
""""" /NerdTree """""


""""" NerdCommenter """""
let g:NERDCustomDelimiters = {
  \ 'javascript': { 'left': '//', 'leftAlt': '/**', 'rightAlt': '*/' },
  \ 'javascript.jquery': { 'left': '//', 'leftAlt': '/**', 'rightAlt': '*/' }
\}
let g:NERDSpaceDelims = 1
""""" /NerdCommenter """""


""""" EasyTags """""
let g:easytags_languages = {
\   'javascript': {
\     'cmd': 'ctags',
\      'recurse_flag': '-R'
\   }
\}
""""" /EasyTags """""

""""" WindowSwap """""
let g:windowswap_map_keys = 0
nnoremap <silent> <leader>qw :call WindowSwap#EasyWindowSwap()<CR>
""""" /WindowSwap """""
"""""""""" /Plugin Settings """"""""""

"""""""""" It's Personal """"""""""
" End lines at 920 columns
set textwidth=920

" Easier indenting of blocks
noremap <leader>; :><CR>
noremap <leader>a <<CR>

" My braces are not always on the first column
" Taken directory from :h motion.txt
noremap [[ ?{<CR>w99[{
noremap ]] /}<CR>b99]}
noremap ][ j0[[%/{<CR>
noremap [] k$][%?}<CR>

" Don't insert comment after enter
set formatoptions-=r formatoptions-=c formatoptions-=o

""""" VIM tabs """""
" map <leader>i to move to tab i for 0-9
let i = 1
while i<=9
  exec "nnoremap <Leader>".i." ".i."gt"
  let i+=1
endwhile

noremap <leader>n :tabn<CR>
noremap <leader>p :tabp<CR>
""""" /VIM tabs """""

" Make sure I ain't cheating with those arrow keys!
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>
" And make sure I aint' cheating with no escape key!
imap <Esc> <nop>

" Split buffer below
set splitbelow

" Map f to 5 for fast movement in visual mode
noremap f 5

" Use semicolon for line movement
noremap ;a ^
noremap ;; $

" Map K to match braces
noremap % K
noremap K %

" Remap jj to escape, so we can move in and out of visual mode
inoremap jj <Esc>
noremap ff <Esc>

" Better command-line completion
set wildmenu

" Show partial commands in the last line of the screen
set showcmd

" Highlight current line
set cursorline
" Highlight searches (use <C-L> to temporarily turn off highlighting; see the
" mapping of <C-L> below)
set hlsearch

" Jump to search as I type
set incsearch

" Allow backspacing over autoindent, line breaks and start of insert action
set backspace=indent,eol,start

" Instead of failing a command because of unsaved changes, instead raise a
" dialogue asking if you wish to save changed files.
set confirm

" Turn off error bells
set noerrorbells
set novisualbell

" Enable use of the mouse for all modes
set mouse=a

"""" Statusline """"
" Set the command window height to 2 lines, to avoid many cases of having to
" "press <Enter> to continue"
set cmdheight=2

" Show file and column in statusline
set laststatus=2
set statusline=
set ruler
"""" /Statusline """"

" Close location list
noremap <leader>l :lclose<CR>

" Quickly time out on keycodes, but never time out on mappings
set notimeout ttimeout ttimeoutlen=200

" Toggle between 'paste' and 'nopaste'
set pastetoggle=<F5>

""""" Mappings """""
" Map <C-L> (redraw screen) to also turn off search highlighting until the
" next search
nnoremap <C-L> :nohl<CR><C-L>

" CTRL-C to copy (visual mode)
vmap <C-c> "+y
" CTRL-X to cut (visual mode)
vmap <C-x> "+x
" CTRL-X to cut (visual mode)
vmap <C-v> <esc>"+gP
""""" /Mappings """""
"""""""""" /It's Personal """"""""""

"""""""""" Unused plugins """"""""""
""""" Syntastic """""
"set statusline+=%{SyntasticStatuslineFlag()}
" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 0
" let g:syntastic_check_on_wq = 0
" let g:syntastic_mode_map = { 'mode': 'passive' }

""" Syntax Checkers """

""" Shortcuts """
" command! SC execute 'SyntasticCheck'
" command! SR execute 'SyntasticReset'
" nmap <F7> :SC<CR>
""" /Shortcuts """

"" HTML Checkers ""
" let g:syntastic_html_checkers = ['w3', 'tidy']
" nnoremap <leader>k :MtaJumpToOtherTag<cr>
"" /HTML Checkers ""

"" JS Checkers ""
" let g:syntastic_javascript_checkers = ['eslint']
" let g:used_javascript_libs = 'underscore,backbone,jquery,requirejs,react,d3'
" let g:vimjs#casesensitive= 0
" let g:vimjs#smartcomplete = 1
" let g:vimjs#chromeapis = 1
"" /JS checkers ""

"" SASS Checkers ""
" let g:syntastic_scss_checkers = ['scss_lint']
"" /SASS Checkers ""
""" /Syntax Checkers """
""""" /Syntastic """""
"""""""""" /Unused plugins """"""""""
